package com.admin.codegenreallynew.util;

import javax.annotation.processing.Generated;
import lombok.Getter;
import lombok.RequiredArgsConstructor;

/**
 * Filter Operator Enum.
 *
 * <p>Includes all filter operations, with their own 'keyword' and 'precedence'.
 */
@Generated(value = "com.exocoding.codegen", comments = "Generated by ExoCoding")
@RequiredArgsConstructor
public enum FilterOperator {

  /** Comparison operators */
  EQUAL("eq", 5, "="),
  NOT_EQUAL("ne", 4, "<>"),
  GREATER_THAN("gt", 9, ">"),
  GREATER_EQUAL("ge", 8, ">="),
  LESS_THAN("lt", 7, "<"),
  LESS_EQUAL("le", 6, "<="),

  /** Logical operators */
  OR("or", 1, "or"),
  AND("and", 2, "and"),
  NOT("not", 3, true, "not");

  @Getter private final String keyword;
  @Getter private final int precedence;
  @Getter private final boolean unary;
  @Getter private final String symbol;

  FilterOperator(String keyword, int precedence, String symbol) {
    this(keyword, precedence, false, symbol);
  }

  public boolean isHigherPrecedence(FilterOperator other) {
    return other != null && (getPrecedence() < other.getPrecedence());
  }

  public static FilterOperator fromString(String string) {
    for (FilterOperator filterOperator : values()) {
      if (string.equalsIgnoreCase(filterOperator.getKeyword())) {
        return filterOperator;
      }
    }
    return null;
  }
}
