package com.admin.codegenreallynew.util;

import jakarta.persistence.criteria.CriteriaBuilder;
import jakarta.persistence.criteria.CriteriaQuery;
import jakarta.persistence.criteria.Predicate;
import jakarta.persistence.criteria.Root;
import javax.annotation.processing.Generated;
import lombok.RequiredArgsConstructor;
import org.springframework.data.jpa.domain.Specification;

@Generated(value = "com.exocoding.codegen", comments = "Generated by ExoCoding")
@RequiredArgsConstructor
public class FilterSpecification<E> implements Specification<E> {

  private final FilterCriteria criteria;

  @Override
  public Predicate toPredicate(
      Root<E> root, CriteriaQuery<?> query, CriteriaBuilder criteriaBuilder) {
    Predicate predicate;
    switch (criteria.getOperator()) {
      case EQUAL ->
          predicate = criteriaBuilder.equal(root.get(criteria.getKey()), criteria.getValue());
      case NOT_EQUAL ->
          predicate = criteriaBuilder.notEqual(root.get(criteria.getKey()), criteria.getValue());
      case GREATER_THAN ->
          predicate =
              criteriaBuilder.greaterThan(
                  root.get(criteria.getKey()), criteria.getValue().toString());
      case GREATER_EQUAL ->
          predicate =
              criteriaBuilder.greaterThanOrEqualTo(
                  root.get(criteria.getKey()), criteria.getValue().toString());
      case LESS_THAN ->
          predicate =
              criteriaBuilder.lessThan(root.get(criteria.getKey()), criteria.getValue().toString());
      case LESS_EQUAL ->
          predicate =
              criteriaBuilder.lessThanOrEqualTo(
                  root.get(criteria.getKey()), criteria.getValue().toString());
      default -> predicate = null;
    }
    return predicate;
  }
}
