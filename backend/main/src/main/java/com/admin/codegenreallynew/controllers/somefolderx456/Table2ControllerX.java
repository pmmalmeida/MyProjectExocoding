package com.admin.codegenreallynew.controllers.somefolderx456;

import com.admin.codegenreallynew.dto.somefolderx2.Tbl2ObjXdto;
import com.admin.codegenreallynew.mapper.Tbl2ObjXMapper;
import com.admin.codegenreallynew.schema.Tbl2ObjXSchema;
import com.admin.codegenreallynew.services.somefolderx3x.Table2Servicex;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import javax.annotation.processing.Generated;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

@Generated(value = "com.exocoding.codegen", comments = "Generated by ExoCoding")
@RestController
@RequiredArgsConstructor(onConstructor_ = @Autowired)
public class Table2ControllerX {

  private final Table2Servicex table2Servicex;

  private final Tbl2ObjXMapper tbl2ObjXMapper;

  @DeleteMapping(path = "/table2obj/{idTable2}")
  @Operation(
      summary = "Delete one Table2Obj",
      responses = {
        @ApiResponse(responseCode = "200", description = "Table2Obj"),
        @ApiResponse(responseCode = "404", description = "Table2Obj")
      })
  protected ResponseEntity<Void> deleteTable2Obj(@PathVariable Long idTable2) {
    table2Servicex.deleteTable2Obj(idTable2);
    ResponseEntity<Void> z = new ResponseEntity<>(HttpStatus.OK);
    return z;
  }

  @GetMapping(path = "/table2obj/{idTable2}")
  @Operation(
      summary = "Read one Table2Obj",
      responses = {
        @ApiResponse(
            responseCode = "200",
            description = "Table2Obj",
            content = @Content(schema = @Schema(implementation = Tbl2ObjXSchema.class))),
        @ApiResponse(responseCode = "404", description = "Table2Obj")
      })
  protected ResponseEntity<Tbl2ObjXSchema> getTable2Obj(@PathVariable Long idTable2) {
    Tbl2ObjXdto tbl2ObjXdto = table2Servicex.readTble2ObjX(idTable2);
    Tbl2ObjXSchema tbl2ObjXSchema = tbl2ObjXMapper.dtoToSchema(tbl2ObjXdto);
    ResponseEntity<Tbl2ObjXSchema> z = new ResponseEntity<>(tbl2ObjXSchema, HttpStatus.OK);
    return z;
  }

  @PostMapping(path = "/table2obj")
  @Operation(
      summary = "Create one Table2Obj",
      responses =
          @ApiResponse(
              responseCode = "201",
              description = "Table2Obj",
              content = @Content(schema = @Schema(implementation = Tbl2ObjXSchema.class))))
  protected ResponseEntity<Tbl2ObjXSchema> postTable2Obj(@RequestBody Tbl2ObjXSchema table2Obj) {
    Tbl2ObjXdto tbl2ObjXdto = tbl2ObjXMapper.schemaToDto(table2Obj);
    tbl2ObjXdto = table2Servicex.createTab2ObjX(tbl2ObjXdto);
    Tbl2ObjXSchema tbl2ObjXSchema = tbl2ObjXMapper.dtoToSchema(tbl2ObjXdto);
    ResponseEntity<Tbl2ObjXSchema> z = new ResponseEntity<>(tbl2ObjXSchema, HttpStatus.CREATED);
    return z;
  }

  @PutMapping(path = "/table2obj/{idTable2}")
  @Operation(
      summary = "Update one Table2Obj",
      responses = {
        @ApiResponse(
            responseCode = "200",
            description = "Table2Obj",
            content = @Content(schema = @Schema(implementation = Tbl2ObjXSchema.class))),
        @ApiResponse(responseCode = "404", description = "Table2Obj")
      })
  protected ResponseEntity<Tbl2ObjXSchema> putTable2Obj(
      @PathVariable Long idTable2, @RequestBody Tbl2ObjXSchema table2Obj) {
    table2Obj.setIdTable2(idTable2);
    Tbl2ObjXdto tbl2ObjXdto = tbl2ObjXMapper.schemaToDto(table2Obj);
    tbl2ObjXdto = table2Servicex.updateTable2Obj(tbl2ObjXdto);
    Tbl2ObjXSchema tbl2ObjXSchema = tbl2ObjXMapper.dtoToSchema(tbl2ObjXdto);
    ResponseEntity<Tbl2ObjXSchema> z = new ResponseEntity<>(tbl2ObjXSchema, HttpStatus.OK);
    return z;
  }
}
