package com.admin.codegenreallynew.controllers.somenewfolder;

import com.admin.codegenreallynew.dto.somefolderx2.Tbl1ObjXdto;
import com.admin.codegenreallynew.mapper.Tbl1ObjXMapper;
import com.admin.codegenreallynew.schema.Tbl1ObjXSchema;
import com.admin.codegenreallynew.services.somefolderx3x.Table1Servicex;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import javax.annotation.processing.Generated;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

/** afoiwajeifjiowjeofijwoijefoijweofjoiwjeojaofj */
@Generated(value = "com.exocoding.codegen", comments = "Generated by ExoCoding")
@RestController
@RequiredArgsConstructor(onConstructor_ = @Autowired)
@RequestMapping(path = "/cenas")
public class Table1ControllerAbxxpto {

  private final Table1Servicex table1Servicex;

  private final Tbl1ObjXMapper tbl1ObjXMapper;

  /** wqdqwdqwdqwdqwdqwd */
  @DeleteMapping(path = "/table1obj/1")
  @Operation(
      summary = "Delete one Table1Obj dwqdqwdqwdqwdqwdqw",
      responses = {
        @ApiResponse(responseCode = "200", description = "Table1Obj"),
        @ApiResponse(responseCode = "404", description = "Table1Obj")
      })
  protected ResponseEntity<Void> deleteTable1Obj2312312312(
      @PathVariable Long idTable1,
      @RequestParam(defaultValue = "0") Integer page,
      @RequestParam(defaultValue = "10") Integer size,
      @RequestParam(required = false) String sort,
      @RequestParam(required = false) String filter) {
    table1Servicex.deleteTable1Obj(idTable1);
    ResponseEntity<Void> z = new ResponseEntity<>(HttpStatus.OK);
    return z;
  }

  /** dqwdqwdqwdqwdqwdqwdqwdqwdqwd */
  @GetMapping(path = "/table1obj/{idTable1}")
  @Operation(
      summary = "Read one Table1Obj",
      responses = {
        @ApiResponse(
            responseCode = "200",
            description = "Table1Obj",
            content = @Content(schema = @Schema(implementation = Tbl1ObjXSchema.class))),
        @ApiResponse(responseCode = "404", description = "Table1Obj")
      })
  protected ResponseEntity<Tbl1ObjXSchema> getTable1Objqwdqwqwd(
      @PathVariable Long idTable1,
      @RequestParam(defaultValue = "0") Integer page,
      @RequestParam(defaultValue = "10") Integer size,
      @RequestParam(required = false) String sort,
      @RequestParam(required = false) String filter) {
    Tbl1ObjXdto tbl1ObjXdto = table1Servicex.readTable1Obj(idTable1);
    Tbl1ObjXSchema tbl1ObjXSchema =
        PagedList.of(tbl1ObjXdto, tbl1ObjXMapper.dtoToSchema(tbl1ObjXdto.getItems()));
    ResponseEntity<Tbl1ObjXSchema> z = new ResponseEntity<>(tbl1ObjXSchema, HttpStatus.OK);
    return z;
  }

  /** asdokaposkdpokaposkdp kasdjqwjoijdqojwodjqoiwjdojqowjdq */
  @PostMapping(path = "/table1objABCD")
  @Operation(
      summary = "Create one Table1Obj qwkjwqdjqjwdjqoiwjdoiqjwoi",
      responses =
          @ApiResponse(
              responseCode = "201",
              description = "Table1Obj",
              content = @Content(schema = @Schema(implementation = Tbl1ObjXSchema.class))))
  protected ResponseEntity<Tbl1ObjXSchema> postTable1ObjXXX(
      @RequestBody Tbl1ObjXSchema table1Obj,
      @RequestParam(defaultValue = "0") Integer page,
      @RequestParam(defaultValue = "10") Integer size,
      @RequestParam(required = false) String sort,
      @RequestParam(required = false) String filter) {
    Tbl1ObjXdto tbl1ObjXdto = tbl1ObjXMapper.schemaToDto(table1Obj);
    tbl1ObjXdto = table1Servicex.createTable1Obj(tbl1ObjXdto);
    Tbl1ObjXSchema tbl1ObjXSchema =
        PagedList.of(tbl1ObjXdto, tbl1ObjXMapper.dtoToSchema(tbl1ObjXdto.getItems()));
    ResponseEntity<Tbl1ObjXSchema> z = new ResponseEntity<>(tbl1ObjXSchema, HttpStatus.CREATED);
    return z;
  }

  /** qwdqwdqwdqwdqwdqwdqw */
  @PutMapping(path = "/table1obj/{idTable1}")
  @Operation(
      summary = "Update one Table1Objqwd qwdqwdqwdqwd",
      responses = {
        @ApiResponse(
            responseCode = "200",
            description = "Table1Obj",
            content = @Content(schema = @Schema(implementation = Tbl1ObjXSchema.class))),
        @ApiResponse(responseCode = "404", description = "Table1Obj")
      })
  protected ResponseEntity<Tbl1ObjXSchema> putTable1Objwqdqwdqwd(
      @PathVariable Long idTable1,
      @RequestBody Tbl1ObjXSchema table1Obj,
      @RequestParam(defaultValue = "0") Integer page,
      @RequestParam(defaultValue = "10") Integer size,
      @RequestParam(required = false) String sort,
      @RequestParam(required = false) String filter) {
    table1Obj.setIdTable1(idTable1);
    Tbl1ObjXdto tbl1ObjXdto = tbl1ObjXMapper.schemaToDto(table1Obj);
    tbl1ObjXdto = table1Servicex.updateTable1Obj(tbl1ObjXdto);
    Tbl1ObjXSchema tbl1ObjXSchema =
        PagedList.of(tbl1ObjXdto, tbl1ObjXMapper.dtoToSchema(tbl1ObjXdto.getItems()));
    ResponseEntity<Tbl1ObjXSchema> z = new ResponseEntity<>(tbl1ObjXSchema, HttpStatus.OK);
    return z;
  }
}
