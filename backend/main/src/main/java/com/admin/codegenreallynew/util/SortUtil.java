package com.admin.codegenreallynew.util;

import javax.annotation.processing.Generated;
import org.apache.commons.lang3.StringUtils;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;

/** Sort Utilities Class. */
@Generated(value = "com.exocoding.codegen", comments = "Generated by ExoCoding")
public class SortUtil {

  public static final String ORDER_ASCENDING = "ASC";
  public static final String ORDER_DESCENDING = "DESC";
  public static final Character COMPONENT_SEPARATOR_CHAR = ',';

  /**
   * Parses a string in the format <field1> ASC,<field2> DESC,<field3> to the equivalent {@link
   * Sort} object. Returns a {@link Sort#unsorted()} if an invalid string is provided.
   *
   * @param sortString input string.
   * @return equivalent sort object.
   */
  public static Sort from(String sortString) {
    Sort sort = Sort.unsorted();
    if (StringUtils.isNotBlank(sortString)) {
      String[] components = StringUtils.split(sortString, COMPONENT_SEPARATOR_CHAR);
      for (String component : components) {
        String sortField = StringUtils.EMPTY;
        Direction sortDirection = Sort.DEFAULT_DIRECTION;
        if (StringUtils.endsWithIgnoreCase(component, ORDER_ASCENDING)) {
          sortField =
              StringUtils.strip(StringUtils.removeEndIgnoreCase(component, ORDER_ASCENDING));
          sortDirection = Direction.ASC;
        }
        if (StringUtils.endsWithIgnoreCase(component, ORDER_DESCENDING)) {
          sortField =
              StringUtils.strip(StringUtils.removeEndIgnoreCase(component, ORDER_DESCENDING));
          sortDirection = Direction.DESC;
        }
        if (StringUtils.isNotBlank(sortField)) {
          sort = sort.and(Sort.by(sortDirection, sortField));
        }
      }
    }
    return sort;
  }

  public static String fromString(String sortString) {
    StringBuilder sort = new StringBuilder();
    if (StringUtils.isNotBlank(sortString)) {
      String[] components = StringUtils.split(sortString, COMPONENT_SEPARATOR_CHAR);
      for (String component : components) {
        String sortField = StringUtils.EMPTY;
        String sortDirection = StringUtils.EMPTY;
        if (StringUtils.endsWithIgnoreCase(component, ORDER_ASCENDING)) {
          sortField =
              StringUtils.strip(StringUtils.removeEndIgnoreCase(component, ORDER_ASCENDING));
          sortDirection = ORDER_ASCENDING;
        }
        if (StringUtils.endsWithIgnoreCase(component, ORDER_DESCENDING)) {
          sortField =
              StringUtils.strip(StringUtils.removeEndIgnoreCase(component, ORDER_DESCENDING));
          sortDirection = ORDER_DESCENDING;
        }
        if (sortDirection == StringUtils.EMPTY) {
          sortField =
              StringUtils.strip(StringUtils.removeEndIgnoreCase(component, ORDER_ASCENDING));
          sortDirection = ORDER_ASCENDING;
        }
        if (StringUtils.isNotBlank(sortField)) {
          if (sort.length() > 0) {
            sort.append(", ");
          }
          sort.append(sortField).append(" ").append(sortDirection);
        }
      }
    }
    return sort.toString();
  }
}
